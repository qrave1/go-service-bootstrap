{{- /* templates/cmd/app/main.go.tmpl */ -}}
package main

import (
	"context"
	"log/slog"
	"os"
	"os/signal"
	"syscall"

	"{{.ProjectName}}/internal/application"
	config_loader "{{.ProjectName}}/internal/application/config"
	app_logger "{{.ProjectName}}/internal/application/logger"
{{if .HasTelegram}}
	telegram_adapter "{{.ProjectName}}/internal/infra/adapters/telegram"
	telegram_port "{{.ProjectName}}/internal/infra/ports/telegram"
{{end}}
	http_port "{{.ProjectName}}/internal/infra/ports/http"
)

func main() {
	// Load config
	cfg, err := application.LoadConfig()
	if err != nil {
		log.Fatalf("failed to load config: %v", err)
	}

	// Init logger
	logger := application.NewLogger(cfg.LogLevel)

	logger.Info("starting application")

{{- if .HasDB }}
	var dsn string
	var repo usecase.UserRepository

{{- if .HasPostgres }}
	dsn = fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		cfg.Postgres.Host, cfg.Postgres.Port, cfg.Postgres.User, cfg.Postgres.Password, cfg.Postgres.Name)
	repo, err = postgres.NewPostgresRepository(dsn)
{{- end }}
{{- if .HasMysql }}
	dsn = fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?parseTime=true",
		cfg.MySQL.User, cfg.MySQL.Password, cfg.MySQL.Host, cfg.MySQL.Port, cfg.MySQL.Name)
	repo, err = mysql.NewMySQLRepository(dsn)
{{- end }}

	if err != nil {
		logger.Fatal("failed to connect to database", "error", err)
	}
	logger.Info("database connection established")

	// Init usecase
	// exampleUsecase := usecase.NewExampleUsecase(repo)
{{- end }}

	app := application.New(cfg, logger)

{{if .HasTelegram}}
	tgBot := telegram_adapter.MustStart(ctx, app)
	telegram_port.RegisterHandlers(app, tgBot)
{{end}}

	// Run HTTP server
	http_port.Run(ctx, app)
}
