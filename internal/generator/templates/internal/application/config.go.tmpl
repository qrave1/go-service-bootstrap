{{- /* templates/internal/application/config.go.tmpl */ -}}
package application

import (
	"github.com/caarlos0/env/v10"
{{- if .HasYAML }}
	"os"
	"gopkg.in/yaml.v3"
{{- end }}
)

type Config struct {
	LogLevel string `env:"LOG_LEVEL" envDefault:"info"`
	HTTP     struct {
		Port int `env:"HTTP_PORT" envDefault:"8080"`
	} `envPrefix:"HTTP_"`
{{- if .HasPostgres }}
	Postgres struct {
		Host     string `env:"PG_HOST" envDefault:"localhost"`
		Port     int    `env:"PG_PORT" envDefault:"5432"`
		User     string `env:"PG_USER" envDefault:"user"`
		Password string `env:"PG_PASSWORD" envDefault:"password"`
		Name     string `env:"PG_DBNAME" envDefault:"mydatabase"`
	} `envPrefix:"PG_"`
{{- end }}
{{- if .HasMysql }}
	MySQL struct {
		Host     string `env:"MYSQL_HOST" envDefault:"localhost"`
		Port     int    `env:"MYSQL_PORT" envDefault:"3306"`
		User     string `env:"MYSQL_USER" envDefault:"user"`
		Password string `env:"MYSQL_PASSWORD" envDefault:"password"`
		Name     string `env:"MYSQL_DBNAME" envDefault:"mydatabase"`
	} `envPrefix:"MYSQL_"`
{{- end }}
}

func LoadConfig() (*Config, error) {
	cfg := &Config{}

{{- if .HasYAML }}
	// Load from YAML file
	f, err := os.Open("config.yaml")
	if err == nil {
		defer f.Close()
		if err := yaml.NewDecoder(f).Decode(cfg); err != nil {
			return nil, err
		}
	}
{{- end }}

	// Parse environment variables
	if err := env.Parse(cfg); err != nil {
		return nil, err
	}

	return cfg, nil
}
